* Imports
#+name:imports
#+begin_src clojure :noweb yes :noweb-ref yes
  (use '[clojure.string :only (split includes? trim replace)])
  (use '[clojure.math :only (sqrt pow)])
  (use '[clojure.set :only (union)])
#+end_src

#+RESULTS: imports

* Input
#+name:inputs
#+begin_src clojure :noweb yes :noweb-ref yes
  (def input (split (slurp "./input.txt") #"\n"))
  (def sample (split (slurp "./sample.txt") #"\n"))
#+end_src

#+name:samples
#+begin_src clojure :noweb yes :noweb-ref yes
  (def sample1 (read-line "???.### 1,1,3"))
  (def sample2 (read-line ".??..??...?##. 1,1,3"))
  (def sample3 (read-line "?#?#?#?#?#?#?#? 1,3,1,6"))
  (def sample4 (read-line "????.#...#... 4,1,1"))
  (def sample5 (read-line "????.######..#####. 1,6,5"))
  (def sample6 (read-line "?###???????? 3,2,1"))

  (def sample7 (read-line "???.###????.###????.###????.###????.### 1,1,3,1,1,3,1,1,3,1,1,3,1,1,3"))
#+end_src

#+RESULTS: samples
| #'user/sample1 |
| #'user/sample2 |
| #'user/sample3 |
| #'user/sample4 |
| #'user/sample5 |
| #'user/sample6 |
| #'user/sample7 |

* Solve
** read-input
#+name:read-input
#+begin_src clojure :noweb yes :noweb-ref yes
  (defn read-line [line]
    (let [split-by-space (split line #" ")]
      (hash-map :springs (first split-by-space) :sizes (map read-string (split (second split-by-space) #",")))))

  (defn read-input [input]
    (map read-line input))

  (defn unfold [record]
    (hash-map :springs (subs (apply str (repeat 5 (str "?" (:springs record)))) 1)
              :sizes (apply concat (repeat 5 (:sizes record)))))
#+end_src

#+RESULTS: read-input
| #'user/read-line  |
| #'user/read-input |

** solve
#+begin_src clojure :noweb yes :noweb-ref yes
  <<imports>>
  <<inputs>>
  <<read-input>>
  (defn operational? [spring] (= spring \.))
  (defn damaged? [spring] (= spring \#))
#+end_src

#+RESULTS:
| #'user/input        |
| #'user/sample       |
| #'user/read-line    |
| #'user/read-input   |
| #'user/operational? |
| #'user/damaged?     |

** Tests
#+begin_src clojure :noweb yes :noweb-ref yes
  <<imports>>
  <<read-input>>
  <<inputs>>
  (defn unknown? [spring] (= spring \?))
  (defn operational? [spring] (= spring \.))
  (defn damaged? [spring] (= spring \#))

  (defn solve-first-unknown [damaged-record]
    (loop [[first-spring & rest-spring] damaged-record
           result ""]
      (if (unknown? first-spring)
        (list (str result \# (apply str rest-spring))
              (str result \. (apply str rest-spring)))
        (recur rest-spring
               (str result first-spring)))))

  (defn remove-first-match [damaged-record]
    (apply str (drop-while damaged? (drop-while #(not (damaged? %)) damaged-record))))

  (defn first-completed? [damaged-record]
    (every? damaged? (first (filter #(some (fn [s] (or (damaged? s) (unknown? s))) %) (partition-by operational? damaged-record)))))

  (defn first-match? [damaged-record sizes]
    (and (first-completed? damaged-record)
         (= (first sizes) (count (take-while damaged? (drop-while #(not (damaged? %)) damaged-record))))))

  (defn first-completed-count [damaged-record]
    (if (first-completed? damaged-record)
      (count (take-while damaged? (drop-while #(not (damaged? %)) damaged-record)))
      0))

  (defn no-match-left? [sizes] (empty? sizes))
  (defn total [list] (apply + list))
  (defn has-state? [spring] (not (unknown? spring)))
  (defn match-size? [record size] (= size (map count (filter #(every? damaged? %) (partition-by damaged? record)))))
  (defn clean-record? [record] (not (some unknown? record)))

  (defn possible-rows [record sizes]
    (cond (and (no-match-left? sizes) (some damaged? record)) nil 
          (and (no-match-left? sizes) (every? #(not unknown? %) record)) [1]
          (> (first-completed-count record) (first sizes)) nil
          (clean-record? record) (if (match-size? record sizes) [2] nil)
          (= (total sizes) (count (filter damaged? record))) (possible-rows (replace record "?" ".") sizes)
          (= (total sizes) (count (filter #(or (damaged? %) (unknown? %)) record))) (possible-rows (replace record "?" "#") sizes)
          (first-match? record sizes) (possible-rows (remove-first-match record) (rest sizes))
          :else (mapcat #(possible-rows % sizes) (solve-first-unknown record))))

  (defn solve-new [input]
    (map #(apply str %) (filter #(not (some operational? (:springs %))) (partition-by operational? (read-input input)))))

  (defn solve-raw [input]
    (map #(count (possible-rows (:springs %) (:sizes %))) (read-input input)))

  (defn solve [input]
    (apply + (map #(count (possible-rows (:springs %) (:sizes %))) (read-input input))))

  (defn solve2 [input]
    (map #(count (possible-rows (:springs %) (:sizes %))) (map unfold (read-input input))))
#+end_src

#+RESULTS:
| #'user/read-line             |
| #'user/read-input            |
| #'user/unfold                |
| #'user/input                 |
| #'user/sample                |
| #'user/unknown?              |
| #'user/operational?          |
| #'user/damaged?              |
| #'user/spring-freqs          |
| #'user/solve-first-unknown   |
| #'user/remove-first-match    |
| #'user/first-completed?      |
| #'user/first-match?          |
| #'user/first-completed-count |
| #'user/no-match-left?        |
| #'user/total                 |
| #'user/has-state?            |
| #'user/match-size?           |
| #'user/clean-record?         |
| #'user/possible-rows         |
| #'user/solve-raw             |
| #'user/solve                 |
| #'user/solve2                |

* Tests
#+begin_src clojure :noweb yes :noweb-ref yes
  (subs (apply str (repeat 5 (str "?" "???.###"))) 1)
  (apply concat (repeat 5 '(1 1 3)))
#+end_src

#+RESULTS:
| "???.###????.###????.###????.###????.###" |
| (1 1 3 1 1 3 1 1 3 1 1 3 1 1 3)           |

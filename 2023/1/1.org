* Imports
#+name:imports
#+begin_src clojure :noweb yes :noweb-ref yes
  (use '[clojure.string :only (split includes?)])
#+end_src


* Input
#+name:inputs
#+begin_src clojure :noweb yes :noweb-ref yes
  (def input (split (slurp "./input.txt") #"\n"))
  (def sample1 ["1abc2" "pqr3stu8vwx" "a1b2c3d4e5f" "treb7uchet"])
  (def sample2 ["two1nine" "eighttwothree" "abcone2threexyz"
                "xtwone3four" "4nineeightseven2" "zoneight234" "7pqrstsixteen"])
#+end_src


* Codes
** 1
#+begin_src clojure :noweb yes :noweb-ref yes
  <<imports>>
  (defn extract-digit [str] (let [nums (filter #(Character/isDigit %) str)] [(first nums) (last nums)]))
  (Integer/parseInt (reduce str (extract-digit "1abc2")))
  (defn solve [input] (apply +
                             (map #(Integer/parseInt %)
                                  (map #(apply str %)
                                       (map #(extract-digit %)
                                            input)))))
  (solve input)
#+end_src

#+RESULTS:
| #'user/extract-digit |
|                   12 |
|         #'user/solve |
|                55386 |


** Extract-digit
#+name:extract-digit
#+begin_src clojure :noweb yes :noweb-ref yes
  (defn extract-digit [str] (let [nums (filter #(Character/isDigit %) str)] [(first nums) (last nums)]))
#+end_src

#+name:replace-nums
#+begin_src clojure :noweb yes :noweb-ref yes
  <<imports>>
  ;; (def num-str {"one" "1" "two" "2" "three" "3" "four" "4" "five" "5"
  ;;               "six" "6" "seven" "7" "eight" "8" "nine" "9"})

  (def num-str {"one" "o1e" "two" "t2o" "three" "t3e" "four" "f4r" "five" "f5e"
                "six" "s6x" "seven" "s7n" "eight" "e8t" "nine" "n9e"})

  ;; (def num-str (array-map "one" "1" "two" "2" "three" "3" "four" "4" "five" "5"
  ;;                         "six" "6" "seven" "7" "eight" "8" "nine" "9"))

  ;; (def num-str (array-map "one" "1" "two" "2" "three" "3" "four" "4" "five" "5"
  ;;                         "six" "6" "seven" "7" "eight" "8" "nine" "9"))

    (defn replace-nums [str]
      (loop [result str
             num-map num-str]
        (if (empty? num-map)
          result
          (recur (replace result (first (first num-map)) (last (first num-map))) (rest num-map)))))
#+end_src

#+RESULTS:
| #'user/num-str       |
| #'user/extract-digit |
| "The color is blue"  |
| #'user/replace-nums  |
| "112"                |

** 2
#+begin_src clojure :noweb yes :noweb-ref yes
  <<imports>>
  <<extract-digit>>
  <<replace-nums>>
  <<inputs>>

  (Integer/parseInt (reduce str (extract-digit "1abc2")))
  (defn solve [input] (apply +
                             (map #(Integer/parseInt %)
                                  (map #(apply str %)
                                       (map #(extract-digit %)
                                            (map #(replace-nums %)
                                                 input))))))

  ;; (defn solve [input]
  ;;   (map #(Integer/parseInt %)
  ;;        (map #(apply str %)
  ;;             (map #(extract-digit %)
  ;;                  (map #(replace-nums %)
  ;;                       input)))))

  sample2
  (solve input)
  num-str
#+end_src

#+RESULTS:
| #'user/extract-digit                                                                                                           |
| #'user/num-str                                                                                                                 |
| #'user/replace-nums                                                                                                            |
| #'user/input                                                                                                                   |
| #'user/sample1                                                                                                                 |
| #'user/sample2                                                                                                                 |
| 12                                                                                                                             |
| #'user/solve                                                                                                                   |
| ["two1nine" "eighttwothree" "abcone2threexyz" "xtwone3four" "4nineeightseven2" "zoneight234" "7pqrstsixteen"]                  |
| 54824                                                                                                                          |
| {"six" "s6x", "three" "t3e", "two" "t2o", "seven" "s7n", "five" "f5e", "eight" "e8t", "one" "o1e", "nine" "n9e", "four" "f4r"} |
| "e8t2ot3e"                                                                                                                     |
